.. _pyreverse:

Pyreverse
---------

``pyreverse`` analyzes your source code and generates package and class diagrams.

It supports output to ``.dot``/``.gv``, ``.puml``/``.plantuml`` (PlantUML) and ``.mmd``/``.html`` (MermaidJS) file formats.
If Graphviz (or the ``dot`` command) is installed, all `output formats supported by Graphviz <https://graphviz.org/docs/outputs/>`_
can be used as well. In this case, ``pyreverse`` first generates a temporary ``.gv`` file, which is then
fed to Graphviz to generate the final image.

Running Pyreverse
'''''''''''''''''

To run ``pyreverse``, use::

  pyreverse [options] <packages>

<packages> can also be a single Python module.
To see a full list of the available options, run::

   pyreverse -h


Command Line Options
....................

Pyreverse provides various options to control the output and appearance of your diagrams:

Output Control
~~~~~~~~~~~~~~

``--output``, ``-o <format>``
    Specify the output format (e.g., .dot, .puml, .plantuml, .mmd, .html).
    Additional formats are available if Graphviz is installed (see `Graphviz output formats <https://graphviz.org/docs/outputs/>`_).

``--output-directory``, ``-d <output_directory>``
    Set the output directory path for generated diagrams.

``--project``, ``-p <project name>``
    Set the project name.

Filtering and Scope
~~~~~~~~~~~~~~~~~~~

``--filter-mode``, ``-f <mode>``
    Control which class members are shown:

    * ``PUB_ONLY`` (default): Show only public attributes
    * ``ALL``: Show all members
    * ``SPECIAL``: Show all but Python special functions (except constructor)
    * ``OTHER``: Show all but protected and private attributes

``--class``, ``-c <class>``
    Create a focused diagram showing a specific class and its relations.
    Automatically enables -ASmy options.

``--show-ancestors``, ``-a <ancestor>``
    Include specified number of ancestor generations.

``--all-ancestors``, ``-A``
    Include all ancestor classes.

``--show-associated``, ``-s <association_level>``
    Include specified levels of associated classes.

``--all-associated``, ``-S``
    Include all associated classes recursively.

``--show-builtin``, ``-b``
    Include Python's builtin objects.

``--show-stdlib``, ``-L``
    Include standard library objects.

Display Options
~~~~~~~~~~~~~~~

``--module-names``, ``-m <y or n>``
    Show or hide module names in class representations.

``--only-classnames``, ``-k``
    Show only class names, hiding attributes and methods.

``--no-standalone``
    Only show connected classes.

``--colorized``
    Enable colored output. Classes/modules in the same package share colors.

``--max-color-depth <depth>``
    Control color distinction by package depth (default: 2).

``--color-palette <color1,color2,...>``
    Specify custom colors for the diagram.

Project Configuration
~~~~~~~~~~~~~~~~~~~~~

``--ignore <file[,file...]>``
    Exclude specific files or directories (use base names).

``--source-roots <path>[,<path>...]>``
    Define source roots for package namespace resolution.
    Supports glob patterns.

``--verbose``
    Enable detailed output for debugging.


Example Output
''''''''''''''

Example diagrams generated with the ``.puml`` output format are shown below.

Class Diagram
.............

.. image:: ../media/pyreverse_example_classes.png
   :width: 625
   :height: 589
   :alt: Class diagram generated by pyreverse
   :align: center


Package Diagram
...............

.. image:: ../media/pyreverse_example_packages.png
   :width: 344
   :height: 177
   :alt: Package diagram generated by pyreverse
   :align: center


Creating Class Diagrams for Specific Classes
''''''''''''''''''''''''''''''''''''''''''''

In many cases creating a single diagram depicting all classes in the project yields a rather unwieldy, giant diagram.
While limiting the input path to a single package or module can already help greatly to narrow down the scope, the ``-c`` option
provides another way to create a class diagram focusing on a single class and its collaborators.
For example, running::

  pyreverse -ASmy -c pylint.checkers.classes.ClassChecker pylint

will generate the full class and package diagrams for ``pylint``, but will additionally generate a file ``pylint.checkers.classes.ClassChecker.dot``:

.. image:: ../media/ClassChecker_diagram.png
   :width: 757
   :height: 1452
   :alt: Package diagram generated by pyreverse
   :align: center

.. toctree::
  :maxdepth: 1
  :hidden:

  configuration
