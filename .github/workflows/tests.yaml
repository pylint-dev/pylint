name: Tests

on:
  push:
    branches:
      - main
      - "maintenance/**"
    paths-ignore:
      - doc/data/messages/**
  pull_request:
    branches:
      - main
      - "maintenance/**"

# permissions:
#  contents: read  # Incompatible with astral-sh/setup-uv cache

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: run / ${{ matrix.python-version }} / ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: macos-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "pypy-3.9"
          - os: ubuntu-latest
            python-version: "pypy-3.10"
          - os: ubuntu-latest
            python-version: "pypy-3.11"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: Set up uv with Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      #- run: |
      #    uv pip install --python=${{ matrix.python-version }} pip
      #    pip --version
      #    uv pip --version
      #- run: uv pip install --editable ".[dev,testutils]"
      #- run: pip list | grep 'astroid\|pylint'
      #- name: Run pytest
      #  run: |
      #    python -m pytest --durations=10 --benchmark-disable --cov --cov-report= tests/
      #- name: Run functional tests with minimal messages config
      #  run: python -m pytest -vv --minimal-messages-config tests/test_functional.py
      #- name: Upload coverage artifact
      #  if: runner.os == 'Linux'
      #  uses: actions/upload-artifact@v4.6.2
      #  with:
      #    name: coverage-${{ matrix.python-version }}
      #    include-hidden-files: true
      #    path: .coverage

  coverage:
    name: process / coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: tests
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: Set up Python 3.x
        uses: actions/setup-python@v5.4.0
        with:
          python-version: "3.x"
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4.2.1
      - name: Combine coverage results
        run: |
          coverage combine coverage*/.coverage
          coverage xml
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  benchmark-linux:
    name: run benchmark / ${{ matrix.python-version }} / Linux
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Run pytest
        run: |
          pip install pygal
          pip install .
          pip list | grep 'astroid\|pylint'
          pytest --exitfirst \
            --benchmark-only \
            --benchmark-autosave \
            --benchmark-save-data \
            --benchmark-group-by="group"
      - name: Create partial artifact name suffix
        id: artifact-name-suffix
        run: >-
          echo "datetime="$(date "+%Y%m%d_%H%M") >> $GITHUB_OUTPUT
      - name: Upload benchmark artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name:
            benchmark-${{ runner.os }}-${{ matrix.python-version }}_${{
            steps.artifact-name-suffix.outputs.datetime }}
          include-hidden-files: true
          path: .benchmarks/
