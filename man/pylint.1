.TH pylint 1 "2015-2-27" pylint
.SH NAME
.B pylint
\- python code static checker

.SH SYNOPSIS
.B  pylint
[
.I OPTIONS
] [
.I <arguments>
]

.SH DESCRIPTION
.B pylint
is a Python source code analyzer which looks for programming
errors, helps enforcing a coding standard and sniffs for some code
smells (as defined in Martin Fowler's Refactoring book)

Pylint can be seen as another PyChecker since nearly all tests you
can do with PyChecker can also be done with Pylint. However, Pylint
offers some more features, like checking length of lines of code,
checking if variable names are well-formed according to your coding
standard, or checking if declared interfaces are truly implemented,
and much more.

Additionally, it is possible to write plugins to add your own checks.

Pylint is shipped with "pyreverse" (UML diagram generator)
and "symilar" (an independent similarities checker).

.SH OPTIONS
.IP "--version"
show program's version number and exit
.IP "--help, -h"
show this help message and exit
.IP "--long-help"
more verbose help.

.SH MASTER
.IP "--rcfile=<file>"
Specify a configuration file.
.IP "--init-hook=<code>"
Python code to execute, usually for sys.path manipulation such as pygtk.require().
.IP "--errors-only, -E"
In error mode, checkers without error messages are disabled and for others, only the ERROR messages are displayed, and no reports are done by default
.IP "--py3k"
In Python 3 porting mode, all checkers will be disabled and only messages emitted by the porting checker will be displayed
.IP "--ignore=<file>[,<file>...]"
Add files or directories to the blacklist. They should be base names, not paths. [current: CVS]
.IP "--persistent=<y_or_n>"
Pickle collected data for later comparisons. [current: yes]
.IP "--load-plugins=<modules>"
List of plugins (as comma separated values of python modules names) to load, usually to register additional checkers. [current: none]
.IP "--jobs=<n-processes>, -j <n-processes>"
Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use. [current: 1]
.IP "--extension-pkg-whitelist=<pkg[,pkg]>"
A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code [current: none]

.SH COMMANDS
.IP "--help-msg=<msg-id>"
Display a help message for the given message id and exit. The value may be a comma separated list of message ids.
.IP "--list-msgs"
Generate pylint's messages.
.IP "--list-conf-levels"
Generate pylint's messages.
.IP "--full-documentation"
Generate pylint's full documentation.
.IP "--generate-rcfile"
Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration.

.SH MESSAGES CONTROL
.IP "--confidence=<levels>"
Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED [current: none]
.IP "--enable=<msg ids>, -e <msg ids>"
Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time. See also the "--disable" option for examples.
.IP "--disable=<msg ids>, -d <msg ids>"
Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once).You can also use "--disable=all" to disable everything first and then reenable specific checks. For example, if you want to run only the similarities checker, you can use "--disable=all --enable=similarities". If you want to run only the classes checker, but have no Warning level messages displayed, use"--disable=all --enable=classes --disable=W"

.SH REPORTS
.IP "--output-format=<format>, -f <format>"
Set the output format. Available formats are text, parseable, colorized, msvs (visual studio) and html. You can also give a reporter class, eg mypackage.mymodule.MyReporterClass. [current: text]
.IP "--files-output=<y_or_n>"
Put messages in a separate file for each module / package specified on the command line instead of printing them on stdout. Reports (if any) will be written in a file name "pylint_global.[txt|html]". [current: no]
.IP "--reports=<y_or_n>, -r <y_or_n>"
Tells whether to display a full report or only the messages [current: yes]
.IP "--evaluation=<python_expression>"
Python expression which should return a note less than 10 (10 is the highest note). You have access to the variables errors warning, statement which respectively contain the number of errors / warnings messages and the total number of statements analyzed. This is used by the global evaluation report (RP0004). [current: 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)]
.IP "--comment=<y_or_n>"
Add a comment according to your evaluation note. This is used by the global evaluation report (RP0004). [current: no]
.IP "--msg-template=<template>"
Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details

.SH EXCEPTIONS
.IP "--overgeneral-exceptions=<comma-separated class names>"
Exceptions that will emit a warning when being caught. Defaults to "Exception" [current: Exception]

.SH CLASSES
.IP "--ignore-iface-methods=<method names>"
List of interface methods to ignore, separated by a comma. This is used for instance to not check methods defines in Zope's Interface base class. [current: isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by]
.IP "--defining-attr-methods=<method names>"
List of method names used to declare (i.e. assign) instance attributes. [current: __init__,__new__,setUp]
.IP "--valid-classmethod-first-arg=<argument names>"
List of valid names for the first argument in a class method. [current: cls]
.IP "--valid-metaclass-classmethod-first-arg=<argument names>"
List of valid names for the first argument in a metaclass class method. [current: mcs]
.IP "--exclude-protected=<protected access exclusions>"
List of member names, which should be excluded from the protected access warning. [current: _asdict,_fields,_replace,_source,_make]

.SH LOGGING
.IP "--logging-modules=<comma separated list>"
Logging modules to check that the string format arguments are in logging function parameter format [current: logging]

.SH VARIABLES
.IP "--init-import=<y_or_n>"
Tells whether we should check for unused import in __init__ files. [current: no]
.IP "--dummy-variables-rgx=<regexp>"
A regular expression matching the name of dummy variables (i.e. expectedly not used). [current: _$|dummy]
.IP "--additional-builtins=<comma separated list>"
List of additional names supposed to be defined in builtins. Remember that you should avoid to define new builtins when possible. [current: none]
.IP "--callbacks=<callbacks>"
List of strings which can identify a callback function by name. A callback name must start or end with one of those strings. [current: cb_,_cb]

.SH DESIGN
.IP "--max-args=<int>"
Maximum number of arguments for function / method [current: 5]
.IP "--ignored-argument-names=<regexp>"
Argument names that match this expression will be ignored. Default to name with leading underscore [current: _.*]
.IP "--max-locals=<int>"
Maximum number of locals for function / method body [current: 15]
.IP "--max-returns=<int>"
Maximum number of return / yield for function / method body [current: 6]
.IP "--max-branches=<int>"
Maximum number of branch for function / method body [current: 12]
.IP "--max-statements=<int>"
Maximum number of statements in function / method body [current: 50]
.IP "--max-parents=<num>"
Maximum number of parents for a class (see R0901). [current: 7]
.IP "--max-attributes=<num>"
Maximum number of attributes for a class (see R0902). [current: 7]
.IP "--min-public-methods=<num>"
Minimum number of public methods for a class (see R0903). [current: 2]
.IP "--max-public-methods=<num>"
Maximum number of public methods for a class (see R0904). [current: 20]

.SH BASIC
.IP "--required-attributes=<attributes>"
Required attributes for module, separated by a comma [current: none]
.IP "--bad-functions=<builtin function names>"
List of builtins function names that should not be used, separated by a comma [current: map,filter,input]
.IP "--good-names=<names>"
Good variable names which should always be accepted, separated by a comma [current: i,j,k,ex,Run,_]
.IP "--bad-names=<names>"
Bad variable names which should always be refused, separated by a comma [current: foo,bar,baz,toto,tutu,tata]
.IP "--name-group=<name1:name2>"
Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles. [current: none]
.IP "--include-naming-hint=<y_or_n>"
Include a hint for the correct naming format with invalid-name [current: no]
.IP "--function-rgx=<regexp>"
Regular expression matching correct function names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--function-name-hint=<string>"
Naming hint for function names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--variable-rgx=<regexp>"
Regular expression matching correct variable names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--variable-name-hint=<string>"
Naming hint for variable names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--const-rgx=<regexp>"
Regular expression matching correct constant names [current: (([A-Z_][A-Z0-9_]*)|(__.*__))$]
.IP "--const-name-hint=<string>"
Naming hint for constant names [current: (([A-Z_][A-Z0-9_]*)|(__.*__))$]
.IP "--attr-rgx=<regexp>"
Regular expression matching correct attribute names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--attr-name-hint=<string>"
Naming hint for attribute names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--argument-rgx=<regexp>"
Regular expression matching correct argument names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--argument-name-hint=<string>"
Naming hint for argument names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--class-attribute-rgx=<regexp>"
Regular expression matching correct class attribute names [current: ([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$]
.IP "--class-attribute-name-hint=<string>"
Naming hint for class attribute names [current: ([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$]
.IP "--inlinevar-rgx=<regexp>"
Regular expression matching correct inline iteration names [current: [A-Za-z_][A-Za-z0-9_]*$]
.IP "--inlinevar-name-hint=<string>"
Naming hint for inline iteration names [current: [A-Za-z_][A-Za-z0-9_]*$]
.IP "--class-rgx=<regexp>"
Regular expression matching correct class names [current: [A-Z_][a-zA-Z0-9]+$]
.IP "--class-name-hint=<string>"
Naming hint for class names [current: [A-Z_][a-zA-Z0-9]+$]
.IP "--module-rgx=<regexp>"
Regular expression matching correct module names [current: (([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$]
.IP "--module-name-hint=<string>"
Naming hint for module names [current: (([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$]
.IP "--method-rgx=<regexp>"
Regular expression matching correct method names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--method-name-hint=<string>"
Naming hint for method names [current: [a-z_][a-z0-9_]{2,30}$]
.IP "--no-docstring-rgx=<regexp>"
Regular expression which should only match function or class names that do not require a docstring. [current: __.*__]
.IP "--docstring-min-length=<int>"
Minimum line length for functions/classes that require docstrings, shorter ones are exempt. [current: -1]

.SH MISCELLANEOUS
.IP "--notes=<comma separated values>"
List of note tags to take in consideration, separated by a comma. [current: FIXME,XXX,TODO]

.SH TYPECHECK
.IP "--ignore-mixin-members=<y_or_n>"
Tells whether missing members accessed in mixin class should be ignored. A mixin class is detected if its name ends with "mixin" (case insensitive). [current: yes]
.IP "--ignored-modules=<module names>"
List of module names for which member attributes should not be checked (useful for modules/projects where namespaces are manipulated during runtime and thus existing member attributes cannot be deduced by static analysis [current: none]
.IP "--ignored-classes=<members names>"
List of classes names for which member attributes should not be checked (useful for classes with attributes dynamically set). [current: SQLObject, optparse.Values, thread._local, _thread._local]
.IP "--zope=<y_or_n>"
When zope mode is activated, add a predefined set of Zope acquired attributes to generated-members. [current: no]
.IP "--generated-members=<members names>"
List of members which are set dynamically and missed by pylint inference system, and so shouldn't trigger E1101 when accessed. Python regular expressions are accepted. [current: REQUEST,acl_users,aq_parent]

.SH SPELLING
.IP "--spelling-dict=<dict name>"
Spelling dictionary name. Available dictionaries: none. To make it working install python-enchant package. [current: none]
.IP "--spelling-ignore-words=<comma separated words>"
List of comma separated words that should not be checked. [current: none]
.IP "--spelling-private-dict-file=<path to file>"
A path to a file that contains private dictionary; one word per line. [current: none]
.IP "--spelling-store-unknown-words=<y_or_n>"
Tells whether to store unknown words to indicated private dictionary in --spelling-private-dict-file option instead of raising a message. [current: no]

.SH FORMAT
.IP "--max-line-length=<int>"
Maximum number of characters on a single line. [current: 100]
.IP "--ignore-long-lines=<regexp>"
Regexp for a line that is allowed to be longer than the limit. [current: ^\s*(# )?<?https?://\S+>?$]
.IP "--single-line-if-stmt=<y_or_n>"
Allow the body of an if to be on the same line as the test if there is no else. [current: no]
.IP "--no-space-check=NO_SPACE_CHECK"
List of optional constructs for which whitespace checking is disabled [current: trailing-comma,dict-separator]
.IP "--max-module-lines=<int>"
Maximum number of lines in a module [current: 1000]
.IP "--indent-string=<string>"
String used as indentation unit. This is usually "    " (4 spaces) or "\\t" (1 tab). [current: '    ']
.IP "--indent-after-paren=<int>"
Number of spaces of indent required inside a hanging  or continued line. [current: 4]
.IP "--expected-line-ending-format=<empty or LF or CRLF>"
Expected format of line ending, e.g. empty (any line ending), LF or CRLF. [current: none]

.SH IMPORTS
.IP "--deprecated-modules=<modules>"
Deprecated modules which should not be used, separated by a comma [current: regsub,TERMIOS,Bastion,rexec]
.IP "--import-graph=<file.dot>"
Create a graph of every (i.e. internal and external) dependencies in the given file (report RP0402 must not be disabled) [current: none]
.IP "--ext-import-graph=<file.dot>"
Create a graph of external dependencies in the given file (report RP0402 must not be disabled) [current: none]
.IP "--int-import-graph=<file.dot>"
Create a graph of internal dependencies in the given file (report RP0402 must not be disabled) [current: none]

.SH SIMILARITIES
.IP "--min-similarity-lines=<int>"
Minimum lines number of a similarity. [current: 4]
.IP "--ignore-comments=<y or n>"
Ignore comments when computing similarities. [current: yes]
.IP "--ignore-docstrings=<y or n>"
Ignore docstrings when computing similarities. [current: yes]
.IP "--ignore-imports=<y or n>"
Ignore imports when computing similarities. [current: no]

.SH ENVIRONMENT VARIABLES

The following environment variables are used:                                   
    * PYLINTHOME                                                                
    Path to the directory where the persistent for the run will be stored. If 
not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working 
directory).                                                                     
    * PYLINTRC                                                                  
    Path to the configuration file. See the documentation for the method used
to search for configuration file.

.SH OUTPUT
Using the default text output, the message format is :                          
                                                                                
        MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE                                
                                                                                
There are 5 kind of message types :                                             
    * (C) convention, for programming standard violation                        
    * (R) refactor, for bad code smell                                          
    * (W) warning, for python specific problems                                 
    * (E) error, for probable bugs in the code                                  
    * (F) fatal, if an error occurred which prevented pylint from doing further
processing.

.SH OUTPUT STATUS CODE
Pylint should leave with following status code:                                 
    * 0 if everything went fine                                                 
    * 1 if a fatal message was issued                                           
    * 2 if an error message was issued                                          
    * 4 if a warning message was issued                                         
    * 8 if a refactor message was issued                                        
    * 16 if a convention message was issued                                     
    * 32 on usage error                                                         
                                                                                
status 1 to 16 will be bit-ORed so you can know which different categories has
been issued by analysing pylint output status code

.SH SEE ALSO
/usr/share/doc/pythonX.Y-pylint/

.SH BUGS
Please report bugs on the project's mailing list:
mailto:code-quality@python.org

.SH AUTHOR
Logilab <python-projects@lists.logilab.org>

